
RobotSoccer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000006f4  00000788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000073  0080006a  0080006a  00000792  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f13  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000049e  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000563  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000334  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000465  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ac3  00000000  00000000  00002989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000344c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_1>
   8:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3d       	cpi	r26, 0xDD	; 221
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  8a:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <spi>:
//*NRF24L01
//***************************************************************************************/

unsigned char spi(unsigned char data)
{
	SPDR=data;
  92:	8f b9       	out	0x0f, r24	; 15
	while ((SPSR & (1<<SPIF))==0);
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <spi+0x2>
	return SPDR;
  98:	8f b1       	in	r24, 0x0f	; 15
}
  9a:	08 95       	ret

0000009c <SPI_RW>:
//unsigned char SPI_RW(unsigned char Buff)
//NRF24L01
/****************************************************************************************************/
unsigned char SPI_RW(unsigned char Buff)
{
   return spi(Buff);    
  9c:	0e 94 49 00 	call	0x92	; 0x92 <spi>
}
  a0:	08 95       	ret

000000a2 <SPI_Read>:
/****************************************************************************************************/
unsigned char SPI_Read(unsigned char reg)
{
	unsigned char reg_val;

	cbi(PORTC,CSN);//CSN = 0;                // CSN low, initialize SPI communication...
  a2:	aa 98       	cbi	0x15, 2	; 21
	SPI_RW(reg);            // Select register to read from..
  a4:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
	reg_val = SPI_RW(0);    // ..then read registervalue
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
	sbi(PORTC,CSN);//CSN = 1;                // CSN high, terminate SPI communication
  ae:	aa 9a       	sbi	0x15, 2	; 21

	return(reg_val);        // return register value
}
  b0:	08 95       	ret

000000b2 <SPI_RW_Reg>:
/****************************************************************************************************/
//unsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)
/****************************************************************************************************/
unsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	d6 2f       	mov	r29, r22
	unsigned char status;

	cbi(PORTC,CSN);//CSN = 0;                   // CSN low, init SPI transaction
  b8:	aa 98       	cbi	0x15, 2	; 21
	status = SPI_RW(reg);      // select register
  ba:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
  be:	c8 2f       	mov	r28, r24
	SPI_RW(value);             // ..and write value to it..
  c0:	8d 2f       	mov	r24, r29
  c2:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
	sbi(PORTC,CSN);//CSN = 1;                   // CSN high again
  c6:	aa 9a       	sbi	0x15, 2	; 21

	return(status);            // return nRF24L01 status uchar
}
  c8:	8c 2f       	mov	r24, r28
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <SPI_Read_Buf>:
/****************************************************************************************************/
//unsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char uchars)
//
/****************************************************************************************************/
unsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char uchars)
{
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	e6 2e       	mov	r14, r22
  de:	17 2f       	mov	r17, r23
  e0:	04 2f       	mov	r16, r20
	unsigned char status,uchar_ctr;

	cbi(PORTC,CSN);//CSN = 0;                    		// Set CSN low, init SPI tranaction
  e2:	aa 98       	cbi	0x15, 2	; 21
	status = SPI_RW(reg);       		// Select register to write to and read status uchar
  e4:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
  e8:	f8 2e       	mov	r15, r24

	for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
  ea:	00 23       	and	r16, r16
  ec:	51 f0       	breq	.+20     	; 0x102 <SPI_Read_Buf+0x32>
  ee:	ce 2d       	mov	r28, r14
  f0:	d1 2f       	mov	r29, r17
  f2:	10 e0       	ldi	r17, 0x00	; 0
		pBuf[uchar_ctr] = SPI_RW(0);    //
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
  fa:	89 93       	st	Y+, r24
	unsigned char status,uchar_ctr;

	cbi(PORTC,CSN);//CSN = 0;                    		// Set CSN low, init SPI tranaction
	status = SPI_RW(reg);       		// Select register to write to and read status uchar

	for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
  fc:	1f 5f       	subi	r17, 0xFF	; 255
  fe:	10 13       	cpse	r17, r16
 100:	f9 cf       	rjmp	.-14     	; 0xf4 <SPI_Read_Buf+0x24>
		pBuf[uchar_ctr] = SPI_RW(0);    //

	sbi(PORTC,CSN);//CSN = 1;
 102:	aa 9a       	sbi	0x15, 2	; 21

	return(status);                    // return nRF24L01 status uchar
}
 104:	8f 2d       	mov	r24, r15
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	08 95       	ret

00000114 <SPI_Write_Buf>:
/*********************************************************************************************************/
//uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
/*****************************************************************************************************/
unsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned uchars)
{
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	e6 2e       	mov	r14, r22
 126:	c7 2e       	mov	r12, r23
 128:	8a 01       	movw	r16, r20
	unsigned char status,uchar_ctr;
	cbi(PORTC,CSN);//CSN = 0;            //SPI
 12a:	aa 98       	cbi	0x15, 2	; 21
	status = SPI_RW(reg);
 12c:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
 130:	d8 2e       	mov	r13, r24
	for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 132:	01 15       	cp	r16, r1
 134:	11 05       	cpc	r17, r1
 136:	61 f0       	breq	.+24     	; 0x150 <SPI_Write_Buf+0x3c>
 138:	fe 2c       	mov	r15, r14
 13a:	ce 2d       	mov	r28, r14
 13c:	dc 2d       	mov	r29, r12
	SPI_RW(*pBuf++);
 13e:	89 91       	ld	r24, Y+
 140:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_RW>
 144:	2c 2f       	mov	r18, r28
 146:	2f 19       	sub	r18, r15
unsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned uchars)
{
	unsigned char status,uchar_ctr;
	cbi(PORTC,CSN);//CSN = 0;            //SPI
	status = SPI_RW(reg);
	for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	20 17       	cp	r18, r16
 14c:	31 07       	cpc	r19, r17
 14e:	b8 f3       	brcs	.-18     	; 0x13e <SPI_Write_Buf+0x2a>
	SPI_RW(*pBuf++);
	sbi(PORTC,CSN);//CSN = 1;           //SPI
 150:	aa 9a       	sbi	0x15, 2	; 21
	return(status);    //
}
 152:	8d 2d       	mov	r24, r13
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	08 95       	ret

00000166 <init_NRF24L01>:
	return SPDR;
}
void init_NRF24L01(void)
{
    //init SPI
    SPCR=0x51; //set this to 0x50 for 1 mbits 
 166:	81 e5       	ldi	r24, 0x51	; 81
 168:	8d b9       	out	0x0d, r24	; 13
    SPSR=0x00; 
 16a:	1e b8       	out	0x0e, r1	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	87 ec       	ldi	r24, 0xC7	; 199
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <init_NRF24L01+0xa>
 174:	00 c0       	rjmp	.+0      	; 0x176 <init_NRF24L01+0x10>
 176:	00 00       	nop
    
    //inerDelay_us(100);
    _delay_us(100);
 	cbi(PORTC,CE);//CE=0;    // chip enable
 178:	ab 98       	cbi	0x15, 3	; 21
 	sbi(PORTC,CSN);//CSN=1;   // Spi disable
 17a:	aa 9a       	sbi	0x15, 2	; 21
 	//SCK=0;   // Spi clock line init high
	SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    //
 17c:	45 e0       	ldi	r20, 0x05	; 5
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	65 e6       	ldi	r22, 0x65	; 101
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	0e 94 8a 00 	call	0x114	; 0x114 <SPI_Write_Buf>
	SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); //
 18a:	45 e0       	ldi	r20, 0x05	; 5
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	60 e6       	ldi	r22, 0x60	; 96
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	8a e2       	ldi	r24, 0x2A	; 42
 194:	0e 94 8a 00 	call	0x114	; 0x114 <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG + EN_AA, 0x00);      // EN P0, 2-->P1
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	81 e2       	ldi	r24, 0x21	; 33
 19c:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //Enable data P0
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e2       	ldi	r24, 0x22	; 34
 1a4:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG + RF_CH, 2);        // Chanel 0 RF = 2400 + RF_CH* (1or 2 M)
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	85 e2       	ldi	r24, 0x25	; 37
 1ac:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); // Do rong data truyen 32 byte
 1b0:	60 e2       	ldi	r22, 0x20	; 32
 1b2:	81 e3       	ldi	r24, 0x31	; 49
 1b4:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   		// 1M, 0dbm
 1b8:	67 e0       	ldi	r22, 0x07	; 7
 1ba:	86 e2       	ldi	r24, 0x26	; 38
 1bc:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);   		 // Enable CRC, 2 byte CRC, Send
 1c0:	6e e0       	ldi	r22, 0x0E	; 14
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
 1c8:	08 95       	ret

000001ca <SetRX_Mode>:
//void SetRX_Mode(void)
//
/****************************************************************************************************/
void SetRX_Mode(void)
{
	cbi(PORTC,CE);//CE=0;
 1ca:	ab 98       	cbi	0x15, 3	; 21
	SPI_RW_Reg(WRITE_REG + CONFIG, 0x07);   		// enable power up and prx
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
	sbi(PORTC,CE);//CE = 1;
 1d4:	ab 9a       	sbi	0x15, 3	; 21
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <SetRX_Mode+0x10>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <SetRX_Mode+0x16>
 1e0:	00 00       	nop
 1e2:	08 95       	ret

000001e4 <nRF24L01_RxPacket>:

/******************************************************************************************************/
//unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
/******************************************************************************************************/
unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
{
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
    unsigned char revale=0;
    unsigned char sta;
	sta=SPI_Read(STATUS);	// Read Status 
 1ec:	87 e0       	ldi	r24, 0x07	; 7
 1ee:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_Read>
 1f2:	18 2f       	mov	r17, r24
	//if(RX_DR)				// Data in RX FIFO
    if((sta&0x40)!=0)		// Data in RX FIFO
 1f4:	86 ff       	sbrs	r24, 6
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <nRF24L01_RxPacket+0x24>
	{
	    cbi(PORTC,CE);//CE = 0; 			//SPI
 1f8:	ab 98       	cbi	0x15, 3	; 21
		SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 1fa:	40 e2       	ldi	r20, 0x20	; 32
 1fc:	be 01       	movw	r22, r28
 1fe:	81 e6       	ldi	r24, 0x61	; 97
 200:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_Read_Buf>
		revale =1;	
 204:	c1 e0       	ldi	r28, 0x01	; 1
 206:	01 c0       	rjmp	.+2      	; 0x20a <nRF24L01_RxPacket+0x26>
/******************************************************************************************************/
//unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
/******************************************************************************************************/
unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
{
    unsigned char revale=0;
 208:	c0 e0       	ldi	r28, 0x00	; 0
	{
	    cbi(PORTC,CE);//CE = 0; 			//SPI
		SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
		revale =1;	
	}
	SPI_RW_Reg(WRITE_REG+STATUS,sta); 
 20a:	61 2f       	mov	r22, r17
 20c:	87 e2       	ldi	r24, 0x27	; 39
 20e:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_RW_Reg>
    sbi(PORTC,CE);//CE = 1; 			//SPI  
 212:	ab 9a       	sbi	0x15, 3	; 21
	return revale;
}
 214:	8c 2f       	mov	r24, r28
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	08 95       	ret

0000021e <InitADC>:
	
	anpla0 = atan2(ahy,ahx);
	anpla1 = atan2(aoy,aox);
	detaanpla= anpla0-anpla1;
	
	errangle = acos(cosgoc)*180/3.14;
 21e:	80 e4       	ldi	r24, 0x40	; 64
 220:	87 b9       	out	0x07, r24	; 7
 222:	83 e8       	ldi	r24, 0x83	; 131
 224:	86 b9       	out	0x06, r24	; 6
 226:	08 95       	ret

00000228 <InitSPI>:
 228:	8d b1       	in	r24, 0x0d	; 13
 22a:	80 65       	ori	r24, 0x50	; 80
 22c:	8d b9       	out	0x0d, r24	; 13
 22e:	70 9a       	sbi	0x0e, 0	; 14
	if(((detaanpla>0)&&(detaanpla <M_PI))|| (detaanpla <-M_PI))  // xet truong hop goc ben phai
	{
		errangle = - errangle; // ben phai
 230:	08 95       	ret

00000232 <InitUART>:
 232:	1b b8       	out	0x0b, r1	; 11
 234:	88 ed       	ldi	r24, 0xD8	; 216
 236:	8a b9       	out	0x0a, r24	; 10
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 bd       	out	0x20, r24	; 32
 23c:	10 bc       	out	0x20, r1	; 32
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	89 b9       	out	0x09, r24	; 9
 242:	08 95       	ret

00000244 <InitEncoder>:
 244:	8b b7       	in	r24, 0x3b	; 59
 246:	80 6c       	ori	r24, 0xC0	; 192
	else
	{
		errangle = errangle;   // ben trai
		
	}
	distance = sqrt(aox*3.48*aox*3.48+aoy*2.89*aoy*2.89); //tinh khoang cach
 248:	8b bf       	out	0x3b, r24	; 59
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	85 bf       	out	0x35, r24	; 53
 24e:	14 be       	out	0x34, r1	; 52
 250:	80 ec       	ldi	r24, 0xC0	; 192
 252:	8a bf       	out	0x3a, r24	; 58
 254:	08 95       	ret

00000256 <InitPort>:
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	8a bb       	out	0x1a, r24	; 26
 25a:	8f eb       	ldi	r24, 0xBF	; 191
 25c:	87 bb       	out	0x17, r24	; 23
 25e:	8c ef       	ldi	r24, 0xFC	; 252
 260:	84 bb       	out	0x14, r24	; 20
 262:	82 ef       	ldi	r24, 0xF2	; 242
 264:	81 bb       	out	0x11, r24	; 17
 266:	08 95       	ret

00000268 <InitTimer>:
 268:	8b e0       	ldi	r24, 0x0B	; 11
 26a:	83 bf       	out	0x33, r24	; 51
 26c:	8e e3       	ldi	r24, 0x3E	; 62
 26e:	8c bf       	out	0x3c, r24	; 60
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	89 bf       	out	0x39, r24	; 57
 274:	82 ea       	ldi	r24, 0xA2	; 162
 276:	8f bd       	out	0x2f, r24	; 47
 278:	8a e1       	ldi	r24, 0x1A	; 26
 27a:	8e bd       	out	0x2e, r24	; 46
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	97 e2       	ldi	r25, 0x27	; 39
 280:	97 bd       	out	0x27, r25	; 39
 282:	86 bd       	out	0x26, r24	; 38
 284:	1b bc       	out	0x2b, r1	; 43
 286:	1a bc       	out	0x2a, r1	; 42
 288:	19 bc       	out	0x29, r1	; 41
 28a:	18 bc       	out	0x28, r1	; 40
 28c:	08 95       	ret

0000028e <init_MCU>:
 28e:	f8 94       	cli
 290:	0e 94 0f 01 	call	0x21e	; 0x21e <InitADC>
 294:	0e 94 22 01 	call	0x244	; 0x244 <InitEncoder>
 298:	0e 94 2b 01 	call	0x256	; 0x256 <InitPort>
 29c:	0e 94 14 01 	call	0x228	; 0x228 <InitSPI>
 2a0:	0e 94 34 01 	call	0x268	; 0x268 <InitTimer>
 2a4:	0e 94 19 01 	call	0x232	; 0x232 <InitUART>
 2a8:	0e 94 b3 00 	call	0x166	; 0x166 <init_NRF24L01>
 2ac:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SetRX_Mode>
 2b0:	78 94       	sei
 2b2:	08 95       	ret

000002b4 <speed>:
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	99 23       	and	r25, r25
 2ba:	54 f0       	brlt	.+20     	; 0x2d0 <speed+0x1c>
	orentation = atan2(ahy,ahx)*180/M_PI + offestsanco;//tinh huong ra goc
 2bc:	ae 9a       	sbi	0x15, 6	; 21
 2be:	44 e6       	ldi	r20, 0x64	; 100
 2c0:	48 9f       	mul	r20, r24
 2c2:	90 01       	movw	r18, r0
 2c4:	49 9f       	mul	r20, r25
 2c6:	30 0d       	add	r19, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	3b bd       	out	0x2b, r19	; 43
 2cc:	2a bd       	out	0x2a, r18	; 42
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <speed+0x30>
 2d0:	ae 98       	cbi	0x15, 6	; 21
 2d2:	4c e9       	ldi	r20, 0x9C	; 156
 2d4:	8c 01       	movw	r16, r24
 2d6:	40 03       	mulsu	r20, r16
 2d8:	90 01       	movw	r18, r0
 2da:	41 9f       	mul	r20, r17
 2dc:	30 0d       	add	r19, r0
 2de:	11 24       	eor	r1, r1
 2e0:	3b bd       	out	0x2b, r19	; 43
 2e2:	2a bd       	out	0x2a, r18	; 42
 2e4:	77 23       	and	r23, r23
 2e6:	54 f0       	brlt	.+20     	; 0x2fc <speed+0x48>
 2e8:	af 9a       	sbi	0x15, 7	; 21
 2ea:	24 e6       	ldi	r18, 0x64	; 100
 2ec:	26 9f       	mul	r18, r22
 2ee:	c0 01       	movw	r24, r0
 2f0:	27 9f       	mul	r18, r23
 2f2:	90 0d       	add	r25, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	99 bd       	out	0x29, r25	; 41
 2f8:	88 bd       	out	0x28, r24	; 40
 2fa:	09 c0       	rjmp	.+18     	; 0x30e <speed+0x5a>
 2fc:	af 98       	cbi	0x15, 7	; 21
 2fe:	2c e9       	ldi	r18, 0x9C	; 156
 300:	26 03       	mulsu	r18, r22
 302:	c0 01       	movw	r24, r0
	if(( 0 < orentation && orentation < 74) ||   ( 0 > orentation && orentation > -80) )
 304:	27 9f       	mul	r18, r23
 306:	90 0d       	add	r25, r0
 308:	11 24       	eor	r1, r1
 30a:	99 bd       	out	0x29, r25	; 41
 30c:	88 bd       	out	0x28, r24	; 40
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <readposition>:
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	8d eb       	ldi	r24, 0xBD	; 189
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <nRF24L01_RxPacket>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	71 f5       	brne	.+92     	; 0x384 <readposition+0x70>
 328:	ed eb       	ldi	r30, 0xBD	; 189
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ab e6       	ldi	r26, 0x6B	; 107
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	89 ed       	ldi	r24, 0xD9	; 217
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	21 91       	ld	r18, Z+
 336:	2d 93       	st	X+, r18
 338:	e8 17       	cp	r30, r24
 33a:	f9 07       	cpc	r31, r25
 33c:	d9 f7       	brne	.-10     	; 0x334 <readposition+0x20>
 33e:	c0 90 6b 00 	lds	r12, 0x006B
 342:	d0 90 6c 00 	lds	r13, 0x006C
 346:	e0 90 6d 00 	lds	r14, 0x006D
 34a:	f0 90 6e 00 	lds	r15, 0x006E
	{
		if(SAN_ID == 1)// phan san duong
		{
			flagtancong=0;
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	40 e2       	ldi	r20, 0x20	; 32
			offsetphongthu = 70 ;
 354:	51 e4       	ldi	r21, 0x41	; 65
 356:	c7 01       	movw	r24, r14
 358:	b6 01       	movw	r22, r12
 35a:	0e 94 c1 02 	call	0x582	; 0x582 <fmod>
 35e:	0e 94 8e 02 	call	0x51c	; 0x51c <__fixunssfsi>
			goctancong = 180;
 362:	70 93 88 00 	sts	0x0088, r23
 366:	60 93 87 00 	sts	0x0087, r22
 36a:	c7 01       	movw	r24, r14
	}
	distance = sqrt(aox*3.48*aox*3.48+aoy*2.89*aoy*2.89); //tinh khoang cach
	orentation = atan2(ahy,ahx)*180/M_PI + offestsanco;//tinh huong ra goc
	if(( 0 < orentation && orentation < 74) ||   ( 0 > orentation && orentation > -80) )
	{
		if(SAN_ID == 1)// phan san duong
 36c:	b6 01       	movw	r22, r12
		}
	}else
	{
		if(SAN_ID == 1)
		{
			flagtancong=1;
 36e:	0e 94 89 02 	call	0x512	; 0x512 <__fixsfsi>
 372:	cb 01       	movw	r24, r22
 374:	6a e0       	ldi	r22, 0x0A	; 10
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodhi4>
			offsetphongthu = -70 ;
			goctancong = 0;
		}
	}
	
}
 37c:	70 93 ba 00 	sts	0x00BA, r23
 380:	60 93 b9 00 	sts	0x00B9, r22
 384:	80 91 87 00 	lds	r24, 0x0087
 388:	90 91 88 00 	lds	r25, 0x0088
 38c:	04 97       	sbiw	r24, 0x04	; 4
 38e:	f1 f4       	brne	.+60     	; 0x3cc <readposition+0xb8>
 390:	60 91 6b 00 	lds	r22, 0x006B
 394:	70 91 6c 00 	lds	r23, 0x006C
 398:	80 91 6d 00 	lds	r24, 0x006D
 39c:	90 91 6e 00 	lds	r25, 0x006E
 3a0:	0e 94 89 02 	call	0x512	; 0x512 <__fixsfsi>
		cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
	}
	  if(idRobot==ROBOT_ID)
	  {
		 // LEDL=!LEDL;
		  cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
 3a4:	cb 01       	movw	r24, r22
 3a6:	6a e0       	ldi	r22, 0x0A	; 10
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divmodhi4>
 3ae:	70 93 ba 00 	sts	0x00BA, r23
 3b2:	60 93 b9 00 	sts	0x00B9, r22
		  flagstatus=1;
		  robotctrl=rb;
 3b6:	8c e1       	ldi	r24, 0x1C	; 28
 3b8:	eb e6       	ldi	r30, 0x6B	; 107
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	ac e9       	ldi	r26, 0x9C	; 156
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	01 90       	ld	r0, Z+
 3c2:	0d 92       	st	X+, r0
 3c4:	8a 95       	dec	r24
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <readposition+0xac>
	}
	  if(idRobot==ROBOT_ID)
	  {
		 // LEDL=!LEDL;
		  cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
		  flagstatus=1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <readposition+0xba>
volatile unsigned int cmdCtrlRobot,idRobot;
robot rb,robotctrl;
unsigned char readposition()
{
	unsigned char  i=0;
	unsigned flagstatus=0;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
		  cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
		  flagstatus=1;
		  robotctrl=rb;
	  }
	return flagstatus;
}
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	08 95       	ret

000003d8 <ctrrobot>:
	
}

void ctrrobot()
{
    if(readposition()==1)//co du lieu moi
 3d8:	0e 94 8a 01 	call	0x314	; 0x314 <readposition>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	a9 f4       	brne	.+42     	; 0x40a <ctrrobot+0x32>
    { 
		if(cmdCtrlRobot ==8)
 3e0:	80 91 b9 00 	lds	r24, 0x00B9
 3e4:	90 91 ba 00 	lds	r25, 0x00BA
 3e8:	08 97       	sbiw	r24, 0x08	; 8
 3ea:	41 f4       	brne	.+16     	; 0x3fc <ctrrobot+0x24>
		{
			speed(100,100);
 3ec:	64 e6       	ldi	r22, 0x64	; 100
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	84 e6       	ldi	r24, 0x64	; 100
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <speed>
			LED_L_ON;
 3f8:	ac 9a       	sbi	0x15, 4	; 21
 3fa:	08 95       	ret
		}
		else
		{
			speed(0,0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <speed>
			LED_L_OFF;
 408:	ac 98       	cbi	0x15, 4	; 21
 40a:	08 95       	ret

0000040c <main>:
}


int main(void)
{
	init_MCU();
 40c:	0e 94 47 01 	call	0x28e	; 0x28e <init_MCU>
	LED_R_ON;
 410:	ad 9a       	sbi	0x15, 5	; 21

	speed(0,0);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <speed>
	while(1)
	{
		ctrrobot();
 41e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <ctrrobot>
 422:	fd cf       	rjmp	.-6      	; 0x41e <main+0x12>

00000424 <__vector_15>:
	}
}


ISR(USART_TXC_vect)
{
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	8f 93       	push	r24
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
	if (tx_counter)
 434:	80 91 8a 00 	lds	r24, 0x008A
 438:	88 23       	and	r24, r24
 43a:	a1 f0       	breq	.+40     	; 0x464 <__vector_15+0x40>
	{
		--tx_counter;
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	80 93 8a 00 	sts	0x008A, r24
		UDR=tx_buffer[tx_rd_index++];
 442:	e0 91 bb 00 	lds	r30, 0x00BB
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	8e 0f       	add	r24, r30
 44a:	80 93 bb 00 	sts	0x00BB, r24
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	ed 56       	subi	r30, 0x6D	; 109
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	80 81       	ld	r24, Z
 456:	8c b9       	out	0x0c, r24	; 12
		#if TX_BUFFER_SIZE != 256
		if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
 458:	80 91 bb 00 	lds	r24, 0x00BB
 45c:	88 30       	cpi	r24, 0x08	; 8
 45e:	11 f4       	brne	.+4      	; 0x464 <__vector_15+0x40>
 460:	10 92 bb 00 	sts	0x00BB, r1
		#endif
	}
}
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	8f 91       	pop	r24
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_13>:
ISR(USART_RXC_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	char status,data;
	status=UCSRA;
 486:	8b b1       	in	r24, 0x0b	; 11
	data=UDR;
 488:	9c b1       	in	r25, 0x0c	; 12
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 48a:	8c 71       	andi	r24, 0x1C	; 28
 48c:	d9 f4       	brne	.+54     	; 0x4c4 <__vector_13+0x50>
	{
		rx_buffer[rx_wr_index++]=data;
 48e:	e0 91 6a 00 	lds	r30, 0x006A
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	8e 0f       	add	r24, r30
 496:	80 93 6a 00 	sts	0x006A, r24
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	e5 57       	subi	r30, 0x75	; 117
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	90 83       	st	Z, r25
		#if RX_BUFFER_SIZE == 256
		// special case for receiver buffer size=256
		if (++rx_counter == 0)
		{
			#else
			if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 4a2:	88 30       	cpi	r24, 0x08	; 8
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__vector_13+0x36>
 4a6:	10 92 6a 00 	sts	0x006A, r1
			if (++rx_counter == RX_BUFFER_SIZE)
 4aa:	80 91 9b 00 	lds	r24, 0x009B
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	88 30       	cpi	r24, 0x08	; 8
 4b2:	19 f0       	breq	.+6      	; 0x4ba <__vector_13+0x46>
 4b4:	80 93 9b 00 	sts	0x009B, r24
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__vector_13+0x50>
			{
				rx_counter=0;
 4ba:	10 92 9b 00 	sts	0x009B, r1
				#endif
				rx_buffer_overflow=1;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 89 00 	sts	0x0089, r24
			}
		}
	}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_1>:

ISR(INT0_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
	
}
 4e0:	0f 90       	pop	r0
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <__vector_2>:
ISR(INT1_vect)
{
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
	
}
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
	
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <__fixsfsi>:
 512:	04 d0       	rcall	.+8      	; 0x51c <__fixunssfsi>
 514:	68 94       	set
 516:	b1 11       	cpse	r27, r1
 518:	bd c0       	rjmp	.+378    	; 0x694 <__fp_szero>
 51a:	08 95       	ret

0000051c <__fixunssfsi>:
 51c:	a0 d0       	rcall	.+320    	; 0x65e <__fp_splitA>
 51e:	88 f0       	brcs	.+34     	; 0x542 <__fixunssfsi+0x26>
 520:	9f 57       	subi	r25, 0x7F	; 127
 522:	90 f0       	brcs	.+36     	; 0x548 <__fixunssfsi+0x2c>
 524:	b9 2f       	mov	r27, r25
 526:	99 27       	eor	r25, r25
 528:	b7 51       	subi	r27, 0x17	; 23
 52a:	a0 f0       	brcs	.+40     	; 0x554 <__fixunssfsi+0x38>
 52c:	d1 f0       	breq	.+52     	; 0x562 <__fixunssfsi+0x46>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	88 1f       	adc	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	1a f0       	brmi	.+6      	; 0x53e <__fixunssfsi+0x22>
 538:	ba 95       	dec	r27
 53a:	c9 f7       	brne	.-14     	; 0x52e <__fixunssfsi+0x12>
 53c:	12 c0       	rjmp	.+36     	; 0x562 <__fixunssfsi+0x46>
 53e:	b1 30       	cpi	r27, 0x01	; 1
 540:	81 f0       	breq	.+32     	; 0x562 <__fixunssfsi+0x46>
 542:	a7 d0       	rcall	.+334    	; 0x692 <__fp_zero>
 544:	b1 e0       	ldi	r27, 0x01	; 1
 546:	08 95       	ret
 548:	a4 c0       	rjmp	.+328    	; 0x692 <__fp_zero>
 54a:	67 2f       	mov	r22, r23
 54c:	78 2f       	mov	r23, r24
 54e:	88 27       	eor	r24, r24
 550:	b8 5f       	subi	r27, 0xF8	; 248
 552:	39 f0       	breq	.+14     	; 0x562 <__fixunssfsi+0x46>
 554:	b9 3f       	cpi	r27, 0xF9	; 249
 556:	cc f3       	brlt	.-14     	; 0x54a <__fixunssfsi+0x2e>
 558:	86 95       	lsr	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b3 95       	inc	r27
 560:	d9 f7       	brne	.-10     	; 0x558 <__fixunssfsi+0x3c>
 562:	3e f4       	brtc	.+14     	; 0x572 <__fixunssfsi+0x56>
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	08 95       	ret
 574:	5e d0       	rcall	.+188    	; 0x632 <__fp_pscA>
 576:	18 f0       	brcs	.+6      	; 0x57e <__fixunssfsi+0x62>
 578:	11 f0       	breq	.+4      	; 0x57e <__fixunssfsi+0x62>
 57a:	62 d0       	rcall	.+196    	; 0x640 <__fp_pscB>
 57c:	38 f4       	brcc	.+14     	; 0x58c <fmod+0xa>
 57e:	56 c0       	rjmp	.+172    	; 0x62c <__fp_nan>
 580:	89 c0       	rjmp	.+274    	; 0x694 <__fp_szero>

00000582 <fmod>:
 582:	e9 2f       	mov	r30, r25
 584:	64 d0       	rcall	.+200    	; 0x64e <__fp_split3>
 586:	b0 f3       	brcs	.-20     	; 0x574 <__fixunssfsi+0x58>
 588:	55 23       	and	r21, r21
 58a:	c9 f3       	breq	.-14     	; 0x57e <__fixunssfsi+0x62>
 58c:	e7 fb       	bst	r30, 7
 58e:	62 17       	cp	r22, r18
 590:	73 07       	cpc	r23, r19
 592:	84 07       	cpc	r24, r20
 594:	95 07       	cpc	r25, r21
 596:	a8 f1       	brcs	.+106    	; 0x602 <fmod+0x80>
 598:	99 f3       	breq	.-26     	; 0x580 <__fixunssfsi+0x64>
 59a:	e9 2f       	mov	r30, r25
 59c:	ff 27       	eor	r31, r31
 59e:	88 23       	and	r24, r24
 5a0:	2a f0       	brmi	.+10     	; 0x5ac <fmod+0x2a>
 5a2:	31 97       	sbiw	r30, 0x01	; 1
 5a4:	66 0f       	add	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	da f7       	brpl	.-10     	; 0x5a2 <fmod+0x20>
 5ac:	95 2f       	mov	r25, r21
 5ae:	55 27       	eor	r21, r21
 5b0:	44 23       	and	r20, r20
 5b2:	32 f0       	brmi	.+12     	; 0x5c0 <fmod+0x3e>
 5b4:	91 50       	subi	r25, 0x01	; 1
 5b6:	50 40       	sbci	r21, 0x00	; 0
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	44 1f       	adc	r20, r20
 5be:	d2 f7       	brpl	.-12     	; 0x5b4 <fmod+0x32>
 5c0:	bb 27       	eor	r27, r27
 5c2:	e9 1b       	sub	r30, r25
 5c4:	f5 0b       	sbc	r31, r21
 5c6:	62 1b       	sub	r22, r18
 5c8:	73 0b       	sbc	r23, r19
 5ca:	84 0b       	sbc	r24, r20
 5cc:	b1 09       	sbc	r27, r1
 5ce:	c1 f2       	breq	.-80     	; 0x580 <__fixunssfsi+0x64>
 5d0:	22 f4       	brpl	.+8      	; 0x5da <fmod+0x58>
 5d2:	62 0f       	add	r22, r18
 5d4:	73 1f       	adc	r23, r19
 5d6:	84 1f       	adc	r24, r20
 5d8:	b1 1d       	adc	r27, r1
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	2a f0       	brmi	.+10     	; 0x5e8 <fmod+0x66>
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	bb 1f       	adc	r27, r27
 5e6:	ef cf       	rjmp	.-34     	; 0x5c6 <fmod+0x44>
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	5a f0       	brmi	.+22     	; 0x604 <fmod+0x82>
 5ee:	41 f0       	breq	.+16     	; 0x600 <fmod+0x7e>
 5f0:	88 23       	and	r24, r24
 5f2:	32 f0       	brmi	.+12     	; 0x600 <fmod+0x7e>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	91 50       	subi	r25, 0x01	; 1
 5fc:	50 40       	sbci	r21, 0x00	; 0
 5fe:	c1 f7       	brne	.-16     	; 0x5f0 <fmod+0x6e>
 600:	93 95       	inc	r25
 602:	06 c0       	rjmp	.+12     	; 0x610 <__fp_mpack>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	9f 5f       	subi	r25, 0xFF	; 255
 60c:	d9 f7       	brne	.-10     	; 0x604 <fmod+0x82>
 60e:	f8 cf       	rjmp	.-16     	; 0x600 <fmod+0x7e>

00000610 <__fp_mpack>:
 610:	9f 3f       	cpi	r25, 0xFF	; 255
 612:	31 f0       	breq	.+12     	; 0x620 <__fp_mpack_finite+0xc>

00000614 <__fp_mpack_finite>:
 614:	91 50       	subi	r25, 0x01	; 1
 616:	20 f4       	brcc	.+8      	; 0x620 <__fp_mpack_finite+0xc>
 618:	87 95       	ror	r24
 61a:	77 95       	ror	r23
 61c:	67 95       	ror	r22
 61e:	b7 95       	ror	r27
 620:	88 0f       	add	r24, r24
 622:	91 1d       	adc	r25, r1
 624:	96 95       	lsr	r25
 626:	87 95       	ror	r24
 628:	97 f9       	bld	r25, 7
 62a:	08 95       	ret

0000062c <__fp_nan>:
 62c:	9f ef       	ldi	r25, 0xFF	; 255
 62e:	80 ec       	ldi	r24, 0xC0	; 192
 630:	08 95       	ret

00000632 <__fp_pscA>:
 632:	00 24       	eor	r0, r0
 634:	0a 94       	dec	r0
 636:	16 16       	cp	r1, r22
 638:	17 06       	cpc	r1, r23
 63a:	18 06       	cpc	r1, r24
 63c:	09 06       	cpc	r0, r25
 63e:	08 95       	ret

00000640 <__fp_pscB>:
 640:	00 24       	eor	r0, r0
 642:	0a 94       	dec	r0
 644:	12 16       	cp	r1, r18
 646:	13 06       	cpc	r1, r19
 648:	14 06       	cpc	r1, r20
 64a:	05 06       	cpc	r0, r21
 64c:	08 95       	ret

0000064e <__fp_split3>:
 64e:	57 fd       	sbrc	r21, 7
 650:	90 58       	subi	r25, 0x80	; 128
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	59 f0       	breq	.+22     	; 0x66e <__fp_splitA+0x10>
 658:	5f 3f       	cpi	r21, 0xFF	; 255
 65a:	71 f0       	breq	.+28     	; 0x678 <__fp_splitA+0x1a>
 65c:	47 95       	ror	r20

0000065e <__fp_splitA>:
 65e:	88 0f       	add	r24, r24
 660:	97 fb       	bst	r25, 7
 662:	99 1f       	adc	r25, r25
 664:	61 f0       	breq	.+24     	; 0x67e <__fp_splitA+0x20>
 666:	9f 3f       	cpi	r25, 0xFF	; 255
 668:	79 f0       	breq	.+30     	; 0x688 <__fp_splitA+0x2a>
 66a:	87 95       	ror	r24
 66c:	08 95       	ret
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	14 06       	cpc	r1, r20
 674:	55 1f       	adc	r21, r21
 676:	f2 cf       	rjmp	.-28     	; 0x65c <__fp_split3+0xe>
 678:	46 95       	lsr	r20
 67a:	f1 df       	rcall	.-30     	; 0x65e <__fp_splitA>
 67c:	08 c0       	rjmp	.+16     	; 0x68e <__fp_splitA+0x30>
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	18 06       	cpc	r1, r24
 684:	99 1f       	adc	r25, r25
 686:	f1 cf       	rjmp	.-30     	; 0x66a <__fp_splitA+0xc>
 688:	86 95       	lsr	r24
 68a:	71 05       	cpc	r23, r1
 68c:	61 05       	cpc	r22, r1
 68e:	08 94       	sec
 690:	08 95       	ret

00000692 <__fp_zero>:
 692:	e8 94       	clt

00000694 <__fp_szero>:
 694:	bb 27       	eor	r27, r27
 696:	66 27       	eor	r22, r22
 698:	77 27       	eor	r23, r23
 69a:	cb 01       	movw	r24, r22
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret

000006a0 <__divmodhi4>:
 6a0:	97 fb       	bst	r25, 7
 6a2:	07 2e       	mov	r0, r23
 6a4:	16 f4       	brtc	.+4      	; 0x6aa <__divmodhi4+0xa>
 6a6:	00 94       	com	r0
 6a8:	07 d0       	rcall	.+14     	; 0x6b8 <__divmodhi4_neg1>
 6aa:	77 fd       	sbrc	r23, 7
 6ac:	09 d0       	rcall	.+18     	; 0x6c0 <__divmodhi4_neg2>
 6ae:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__udivmodhi4>
 6b2:	07 fc       	sbrc	r0, 7
 6b4:	05 d0       	rcall	.+10     	; 0x6c0 <__divmodhi4_neg2>
 6b6:	3e f4       	brtc	.+14     	; 0x6c6 <__divmodhi4_exit>

000006b8 <__divmodhi4_neg1>:
 6b8:	90 95       	com	r25
 6ba:	81 95       	neg	r24
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	08 95       	ret

000006c0 <__divmodhi4_neg2>:
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255

000006c6 <__divmodhi4_exit>:
 6c6:	08 95       	ret

000006c8 <__udivmodhi4>:
 6c8:	aa 1b       	sub	r26, r26
 6ca:	bb 1b       	sub	r27, r27
 6cc:	51 e1       	ldi	r21, 0x11	; 17
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <__udivmodhi4_ep>

000006d0 <__udivmodhi4_loop>:
 6d0:	aa 1f       	adc	r26, r26
 6d2:	bb 1f       	adc	r27, r27
 6d4:	a6 17       	cp	r26, r22
 6d6:	b7 07       	cpc	r27, r23
 6d8:	10 f0       	brcs	.+4      	; 0x6de <__udivmodhi4_ep>
 6da:	a6 1b       	sub	r26, r22
 6dc:	b7 0b       	sbc	r27, r23

000006de <__udivmodhi4_ep>:
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	5a 95       	dec	r21
 6e4:	a9 f7       	brne	.-22     	; 0x6d0 <__udivmodhi4_loop>
 6e6:	80 95       	com	r24
 6e8:	90 95       	com	r25
 6ea:	bc 01       	movw	r22, r24
 6ec:	cd 01       	movw	r24, r26
 6ee:	08 95       	ret

000006f0 <_exit>:
 6f0:	f8 94       	cli

000006f2 <__stop_program>:
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <__stop_program>
